using AutoMapper;
using SportEvent.BLL.DTO;
using SportEvent.BLL.Interface;
using SportEvent.DAL.Models;
using SportEvent.DAL.Repositories;
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;

namespace SportEvent.BLL
{
    public class ManagerBase<T> : IManagerBase<T> where T : ModelBase
    {
        public RepositoryBase<T> _rep { get; set; }
        private IMapper _mapper { get; set; }
        public ManagerBase(RepositoryBase<T> rep)
        {
            _rep = rep;
            if (_mapper == null)
            {
                var config = new MapperConfiguration(cfg =>
                {
                    cfg.CreateMap<T, T>();
                });

                _mapper = config.CreateMapper();
            }
        }

        /// <summary>
        /// Create new item. Id will be autogenerated.
        /// </summary>
        /// <param name="data">Item</param>
        /// <param name="createdBy">Creator name or id</param>
        /// <returns></returns>
        public virtual async Task<T> CreateAsync(T data, string createdBy)
        {
            try
            {
                if (!await OnValidationAsync(ValidationAction.Create, null, data, null, createdBy)) return null;

                data.CreatedBy = data.LastUpdatedBy = createdBy;
                data.CreatedDate = data.LastUpdatedDate = DateTime.UtcNow;
                data.IsActive = true;

                await _rep.AddAsync(data);

                return data;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw new ApplicationException("Failed to create new item", e);
            }
        }

        public virtual async Task<ResultDTO<T>> GetAllAsync(int page, int perPages)
        {
            try
            {
                var data = await _rep.GetAsync(null, null, true, perPages, page);
                var total = await _rep.CountAsync(null);
                int totalPages = total / perPages;
                var prevPage = page > 0 ? $"?page={page - 1}" : "";
                var nextPage = page < totalPages ? $"?page={page + 1}" : "";

                var result = new ResultDTO<T>()
                {
                    Data = data,
                    Meta = new MetaResultDTO()
                    {
                        Pagination = new PaginationResultDTO()
                        {
                            Total = total,
                            Count = data.Count,
                            Per_Page = perPages,
                            Total_Pages = totalPages,
                            Links = new PaginationLinkDTO()
                            {
                                Previous = prevPage,
                                Next = nextPage
                            }
                        }
                    }
                };

                return result;
            }
            catch(Exception e)
            {
                Console.WriteLine(e);
                throw new ApplicationException($"Failed to get list of item ", e);
            }
        }

        /// <summary>
        /// Get item by Id
        /// </summary>
        /// <param name="id">Id</param>
        /// <param name="activeOnly">Get only active item or not</param>
        /// <returns></returns>
        public virtual async Task<T> GetByIdAsync(int id, bool activeOnly = true)
        {
            try
            {
                var data = activeOnly ?
                    await _rep.GetSingleAsync(a => a.Id == id && a.IsActive == true) :
                    await _rep.GetByIdAsync(id);

                return data;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw new ApplicationException($"Failed to get item for id {id}", e);
            }
        }

        protected enum ValidationAction
        {
            Create,
            Update,
            Delete
        }

        protected virtual async Task<bool> OnValidationAsync(ValidationAction action,
            T existingData = null, T newData = null,
            int? id = null, string userId = "") => true;

        /// <summary>
        /// Update item
        /// </summary>
        /// <param name="data">item data</param>
        /// <param name="updatedBy">updater id or username</param>
        /// <returns></returns>
        public virtual async Task<T> UpdateAsync(T data, string updatedBy)
        {
            try
            {
                var existing = await _rep.GetByIdAsync(data.Id);

                if (existing == null)
                {
                    throw new KeyNotFoundException($"Invalid id {data.Id}");
                }

                if (!await OnValidationAsync(ValidationAction.Update, existing, data, data.Id, updatedBy)) return null;

                var createdBy = existing.CreatedBy;
                var createdDate = existing.CreatedDate;

                existing = _mapper.Map(data, existing);

                existing.CreatedBy = createdBy;
                existing.CreatedDate = createdDate;
                existing.LastUpdatedBy = updatedBy;
                existing.LastUpdatedDate = DateTime.UtcNow;

                await _rep.EditAsync(existing);

                return existing;
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw new ApplicationException($"Failed to update item with id {data.Id}", e);
            }
        }

        /// <summary>
        /// delete item
        /// </summary>
        /// <param name="id">data id </param>
        /// <returns></returns>
        public virtual async Task DeleteAsync(int id)
        {
            try
            {
                var existing = await _rep.GetByIdAsync(id);
                if (existing == null) throw new ArgumentException($"Invalid id {id}");

                if (!await OnValidationAsync(ValidationAction.Delete, existing, null, id, null)) return;

                await _rep.DeleteAsync(existing);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                throw new ApplicationException($"Failed to delete item with id {id}", e);
            }
        }

    }
}
